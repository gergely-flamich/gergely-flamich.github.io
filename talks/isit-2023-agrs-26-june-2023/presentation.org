#+TITLE: Adaptive Greedy Rejection Sampling
#+author: Gergely Flamich
#+date: 26/06/2023

#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+OPTIONS: reveal_title_slide:"<h2>%t</h2><h2>%s</h2></br><h4><u>Gergely Flamich</u> and Lucas Theis</h4><h4>%d</h4><h6>gergely-flamich.github.io</h6>"
#+OPTIONS: toc:nil
#+REVEAL_THEME: white
#+REVEAL_INIT_OPTIONS: slideNumber:'c/t', transition:'none'
#+REVEAL_HLEVEL:0
#+REVEAL_MATHJAX_URL: https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js

* In Collaboration With

#+REVEAL_HTML: <img src="./img/lucas_profile.jpg" class="r-stretch">
Lucas Theis

* Background

** Channel Simulation
#+ATTR_REVEAL: :frag (appear)
Correlated r.v.s $X, Y \sim P_{X, Y}$

#+ATTR_REVEAL: :frag (appear)
Alice receives $Y \sim P_Y$

#+ATTR_REVEAL: :frag (appear)
Bob wants to simulate $X \sim P_{X \mid Y}$

#+ATTR_REVEAL: :frag (appear)
How many bits does Alice need to send to Bob?

#+ATTR_REVEAL: :frag (appear)
When common randomness $S$ available (SFRL):
$$
H[X \mid S] \leq I[X; Y] + \log (I[X; Y] + 1) + 4.
$$


** Lossy compression
#+ATTR_REVEAL: :frag (appear)
[[./img/jpeg_example/transform_encoding.png]]
#+ATTR_REVEAL: :frag (appear)
[[./img/jpeg_example/transform_decoding.png]]


* Greedy Rejection Sampling

** Greedy Rejection Sampling
#+ATTR_REVEAL: :frag (appear)
Originally proposed by Harsha et al. (2006) for discrete distributions.

#+ATTR_REVEAL: :frag (appear)
We extend it to Borel probability measures over Polish spaces.

** GRS Example
#+ATTR_REVEAL: :frag (appear)
Target $Q = \mathcal{N}(\mu, \sigma^2)$, proposal $P = \mathcal{N}(0, 1)$

#+REVEAL_HTML: <img src="./img/grs_example/original_grs.png" class="fragment (appear)" style="width:46%; margin:0px;">
#+REVEAL_HTML: <p class="fragment (appear)" style="margin:0px">Change of variables: \(U = F_P(X)\)</p>
#+REVEAL_HTML: <img src="./img/grs_example/cdf_grs.png" class="fragment (appear)" style="width:46%; margin-top:0px;">

** GRS Example Cont'd
#+REVEAL_HTML: <div class="r-stack">
#+REVEAL_HTML: <img src="./img/grs_example/lower_cut_grs.png" class="fragment (appear)" style="width:50%; margin:0px auto;">
#+REVEAL_HTML: <img src="./img/grs_example/lower_cut_with_rejected_grs.png" class="fragment (appear)" style="width:50%; margin:0px auto;">
#+REVEAL_HTML: </div>
#+REVEAL_HTML: <p class="fragment (appear)" style="margin:0px">If rejected, normalize upper half and repeat:</p>
#+REVEAL_HTML: <img src="./img/grs_example/upper_cut_grs.png" class="fragment (appear)" style="width:50%; margin-top:0px;">

** GRS Coding
#+ATTR_REVEAL: :frag (appear)
To encode sample:
#+ATTR_REVEAL: :frag (appear)
Simulate $X_i \sim P$ with common randomness $S$
#+ATTR_REVEAL: :frag (appear)
Count number of rejections $K$
#+ATTR_REVEAL: :frag (appear)
Transmit $K$ using a Zeta coding distribution:
\[
\zeta(k \mid \alpha) \propto k^{-\alpha}
\]

** GRS Analysis
#+ATTR_REVEAL: :frag (appear)
For fixed $Q$ and $P$:
\[
H[K] \leq D_{KL}[Q \,\Vert\, P] + \log(D_{KL}[Q \,\Vert\, P] + 1) + 4
\]
#+ATTR_REVEAL: :frag (appear)
When $Q \gets P_{X \mid Y}$ and $P \gets P_X$, average over $Y$:
\[
H[K] \leq I[X; Y] + \log(I[X; Y] + 1) + 4
\]

** GRS Analysis Cont'd
#+ATTR_REVEAL: :frag (appear)
\[
\mathbb{E}[K + 1] = 2^{D_{\infty}[Q \,\Vert\, P]}
\]
where
\[
D_{\infty}[Q \,\Vert\, P] = \log\left(\mathrm{ess\,sup}_{x \in \Omega}\left\{\frac{dQ}{dP}(x)\right\}\right)
\]

** The Gaussian Case
#+ATTR_REVEAL: :frag (appear)
\[
X \mid \mu \sim \mathcal{N}(\mu, \rho^2I), \quad \mu \sim \mathcal{N}(0, \sigma^2I)
\]
#+ATTR_REVEAL: :frag (appear)
Then:
\[
P_{X} = \mathcal{N}(0, (\sigma^2 + \rho^2)I)
\]
#+ATTR_REVEAL: :frag (appear)
Now, we find:
$$
\mathbb{E}[K + 1] = \infty
$$

** The Gaussian Case: Overdispersion
#+ATTR_REVEAL: :frag (appear)
Use overdispersed marginal:
\[
P_s = \mathcal{N}(0, (s^2 + \rho^2)I), \quad \sigma^2 < s^2
\]

#+REVEAL_HTML: <img src="./img/overdispersed_v2.png" class="fragment (appear)" style="width:60%">


* Adaptive Greedy Rejection Sampling

** GRS Example Revisited
#+REVEAL_HTML: <div class="r-stack">
#+REVEAL_HTML: <img src="./img/grs_example/cdf_grs.png" class="fragment (appear)" style="width:50%; margin:0px auto;">
#+REVEAL_HTML: <img src="./img/grs_example/upper_cut_grs.png" class="fragment (appear)" style="width:50%; margin:0px auto;">
#+REVEAL_HTML: </div>
#+REVEAL_HTML: <p class="fragment (appear)" style="margin:0px">Most of sample space useless, <em>adapt proposal</em>:</p>
#+REVEAL_HTML: <div class="r-stack">
#+REVEAL_HTML: <img src="./img/grs_example/upper_cut_with_bound_grs.png" class="fragment (appear)" style="width:50%; margin:0px auto;">
#+REVEAL_HTML: <img src="./img/grs_example/upper_cut_with_refined_proposal_grs.png" class="fragment (appear)" style="width:50%; margin:0px auto;">
#+REVEAL_HTML: </div>

** AGRS Coding
#+ATTR_REVEAL: :frag (appear)
Need suitable sequence of bounds $B_1, B_2, \dots$.

#+ATTR_REVEAL: :frag (appear)
Need to communicate $K, B_K$!

#+ATTR_REVEAL: :frag (appear)
*Theorem:*
\[
H[K] \leq C + \log(C + 1) + 3.63,
\]
where $C = I[X;Y] + \mathbb{E}[\log P(B_{m_{K}})]$.

** AGRS with Dithered Quantization
#+ATTR_REVEAL: :frag (appear)
$$
\lfloor c + U \rceil - U \stackrel{d}{=} c + U'
$$
where $U, U' \sim \mathrm{Unif}(-1/2, 1/2)$

#+ATTR_REVEAL: :frag (appear)
If $c \in [1/2, M - 3/2)$, then $\lfloor c + U \rceil \in [0:M - 1]$.

#+ATTR_REVEAL: :frag (appear)
\[
\frac{\lfloor c + U \rceil - U}{M} \sim \mathrm{Unif}\left(\frac{c}{M} - \frac{1}{2M}, \frac{c}{M} + \frac{1}{2M} \right).
\]


** AGRS with Dithered Quantization Cont'd
#+ATTR_REVEAL: :frag (appear)
With DQ, we can encode any bound with size $1 / M$.

#+ATTR_REVEAL: :frag (appear)
What about bounds with arbitrary rational sizes?

#+ATTR_REVEAL: :frag (appear)
*DQ + Bits-back*: Bits-back Quantization (BBQ)

** AGRS for 1D Gaussians
#+ATTR_REVEAL: :frag (appear)
Apply AGRS to our Gaussian example:

#+REVEAL_HTML: <div class="r-stretch">
#+REVEAL_HTML: <img src="./img/agrs_runtime.png" class="fragment (appear)" style="width:50%; margin:0px auto;">
#+REVEAL_HTML: <img src="./img/agrs_codelength.png" class="fragment (appear)" style="width:46.3%; margin:0px auto;">
#+REVEAL_HTML: </div>

* Future directions
#+ATTR_REVEAL: :frag (appear)
1. Is there a sampling algorithm with $\mathcal{O}\left(2^{D_{KL}[Q \,\Vert\, P]}\right)$ or is $2^{D_{\infty}[Q \,\Vert\, P]}$ tight?
2. Connection to Poisson Functional Representation (Li and El Gamal, 2017)? See Greedy Poisson Rejection Sampling (F., 2023)
3. Specialized algorithms for Gaussians?

* References
- P. Harsha, R. Jain, D. McAllester, and J. Radhakrishnan, “The communication complexity of correlation,” IEEE Transactions on Information Theory, vol. 56, no. 1, pp. 438–449, 2010.
- C. T. Li and A. El Gamal, “Strong functional representation lemma and applications to coding theorems,” IEEE Transactions on Information Theory, vol. 64, no. 11, pp. 6967–6978, 2018.
- F. “Greedy Poisson Rejection Sampling,” arXiv preprint arXiv:2305.15313, 2023.

* BBQ
#+REVEAL_HTML: <img src="./img/bbq.png" style="width:100%; margin:0px auto;">
